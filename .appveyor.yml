image:
- Visual Studio 2017
- Ubuntu

configuration:
-  Debug
-  Release

platform:
  - x64

environment:
  COVERALLS_REPO_TOKEN:
    secure: FQ1lM0r4iUJaYrmsIIfMfYU7p/S6/8TZ3pgV26mIQYrwDNocGao2g9KMw0pU3S3E

branches:
  only:
  - master

init:
- ps: |
    env
    Write-Host "APPVEYOR_BUILD_WORKER_IMAGE ->  $env:APPVEYOR_BUILD_WORKER_IMAGE"
    Write-Host "PLATFORM is $env:Platform"
    Write-Host "CONFIGURATION is $env:Configuration"
    Write-Host "cmake -DCMAKE_BUILD_TYPE=$($env:Configuration)"
    Write-Host "cmake --build . --config $($env:Configuration)"

install:
- ps: |
    if ($isWindows) {
          vcpkg install gtest:x64-Windows
        } else {
          pip install --user cpp-coveralls
          git clone https://github.com/Microsoft/vcpkg.git /home/appveyor/projects/vcpkg
          cd /home/appveyor/projects/vcpkg
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          (sudo apt-get update -y) -and (sudo apt-get install g++-7 -y) -and (sudo apt-get install make -y)
          sudo apt-get install lcov -y
          (sh bootstrap-vcpkg.sh) -and (./vcpkg install gtest) -and (cd /home/appveyor/projects/shiva)
        }

build_script:
  - ps: |
      mkdir build
      cd build
      if ($isWindows) {
            cmake -DCMAKE_BUILD_TYPE="$($env:Configuration)" -DSHIVA_BUILD_TESTS=ON -DSHIVA_BUILD_EXAMPLES=ON -G "Visual Studio 15 2017 Win64" .. -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake
            cmake --build . --config $($env:Configuration) -- /verbosity:minimal /maxcpucount:3
          } else {
            if ($env:Configuration -eq "Debug") {
              cmake -DCMAKE_TOOLCHAIN_FILE="/home/appveyor/projects/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE="$($env:Configuration)" -DSHIVA_BUILD_TESTS=ON -DSHIVA_BUILD_EXAMPLES=ON -DPROJECT_COVERAGE=1 ..
            } else {
              cmake -DCMAKE_TOOLCHAIN_FILE="/home/appveyor/projects/vcpkg/scripts/buildsystems/vcpkg.cmake" -DCMAKE_BUILD_TYPE="$($env:Configuration)" -DSHIVA_BUILD_TESTS=ON -DSHIVA_BUILD_EXAMPLES=ON ..
            }
            cmake --build . --config $($env:Configuration)
          }

test_script:
- ps: |
    ctest --no-compress-output -T Test -C $env:Configuration
    cd ../bin
    if ($isWindows) {
      $filePattern = '*-test.exe'
    } else {
      $filePattern = '*-test'
    }
    foreach ($file in get-ChildItem $filePattern)
    {
      $var = $file.name
      & ./$var --gtest_output="xml:$var-result.xml"
    }
    cd ..
    mkdir test-result
    cd test-result
    mkdir ctest
    cd ..
    cp bin/*.xml test-result
    cp build/Testing/*/*.xml test-result/ctest

on_success:
  - ps: |
      if (($isLinux) -and ($env:Configuration -eq "Debug")) {
        coveralls --gcov gcov-7 --gcov-options '\-lp' --root $env:APPVEYOR_BUILD_FOLDER --build-root $env:APPVEYOR_BUILD_FOLDER/build --extension cpp --extension hpp --include modules --include tests
      }

on_finish:
  - ps: |
      cd test-result/ctest
      $XSLInputElement = New-Object System.Xml.Xsl.XslCompiledTransform
      $XSLInputElement.Load("https://raw.githubusercontent.com/rpavlik/jenkins-ctest-plugin/master/ctest-to-junit.xsl")
      $XSLInputElement.Transform((Resolve-Path .\Test.xml), (Join-Path (Resolve-Path .) "ctest-to-junit-results.xml"))
      $wc = New-Object 'System.Net.WebClient'
      $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\ctest-to-junit-results.xml))
      cd ..
      foreach ($file in get-ChildItem *.xml)
      {
        echo $file.name
        $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $file.name))
      }
      echo "finish"